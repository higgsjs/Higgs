TODO: Blog post, "In Hindsight: How I'd do it Even Better"
Slowly but surely nearing the end of my PhD. Many ideas I won't have time
to explore.

Negative info should be propagated using bit sets. This would allow having a
type test, is_object() for all objects at once, and still gain type information.
May also be able to have multiple kinds of typed arrays and an is_array() test.

Some amount of constant propagation should be built into versioning. Useful
for many simple cases. Booleans come to mind. Constant shapes.

Memory allocation of AST & IR nodes should be thought of from the beginning
- Either zones or pools. Pools probably more flexible/safe.

Should do transformations at the IR level.
- IR needs new constructs to integrate versioning
- Guards? Child sub-versions of other blocks with preconditions?
- Incremental generation, need branch edge "stubs"
- May be possible to completely eliminate the context with annotations/guards
  - save memory, context lookups are espensive, context objects are big

Incremental inlining at the IR level
- Could try to reg alloc inlined code
- Probably want on-the-fly stack allocation
  - Except for parameters, these get a reserved slot?
- If more stack slots are needed, could resize stack frame
  - Remap slots and invalidate all compiled blocks for the function

Should use the C stack, match call and return instructions
- CPUs are optimized for this
